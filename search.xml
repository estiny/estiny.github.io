<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>SpringCloud之服务的注册与发现Eureka</title>
      <link href="/2018/09/12/eureka/"/>
      <url>/2018/09/12/eureka/</url>
      <content type="html"><![CDATA[<h1 id="一、创建服务注册中心"><a href="#一、创建服务注册中心" class="headerlink" title="一、创建服务注册中心"></a>一、创建服务注册中心</h1><h5 id="1-1-首先创建一个maven主工程。"><a href="#1-1-首先创建一个maven主工程。" class="headerlink" title="1.1 首先创建一个maven主工程。"></a>1.1 首先创建一个maven主工程。</h5><p>首先创建一个主Maven工程，在其pom文件引入依赖，spring Boot版本为2.0.3.RELEASE，Spring Cloud版本为Finchley.RELEASE</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;com.nic&lt;/groupId&gt;    &lt;artifactId&gt;eureka&lt;/artifactId&gt;    &lt;packaging&gt;pom&lt;/packaging&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;        &lt;relativePath/&gt;    &lt;/parent&gt;    &lt;modules&gt;        &lt;module&gt;eureka-server&lt;/module&gt;        &lt;module&gt;server-hi&lt;/module&gt;    &lt;/modules&gt;    &lt;properties&gt;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;        &lt;java.version&gt;1.8&lt;/java.version&gt;        &lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;dependencyManagement&gt;        &lt;dependencies&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;                &lt;type&gt;pom&lt;/type&gt;                &lt;scope&gt;import&lt;/scope&gt;            &lt;/dependency&gt;        &lt;/dependencies&gt;    &lt;/dependencyManagement&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;&lt;/project&gt;</code></pre><h5 id="1-2-然后创建2个model工程-一个model工程作为服务注册中心，即Eureka-Server-另一个作为Eureka-Client。"><a href="#1-2-然后创建2个model工程-一个model工程作为服务注册中心，即Eureka-Server-另一个作为Eureka-Client。" class="headerlink" title="1.2 然后创建2个model工程:一个model工程作为服务注册中心，即Eureka Server,另一个作为Eureka Client。"></a>1.2 然后创建2个model工程:一个model工程作为服务注册中心，即Eureka Server,另一个作为Eureka Client。</h5><p>创建完后的工程，其pom.xml继承了父pom文件，并引入spring-cloud-starter-netflix-eureka-server的依赖，代码如下：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;eureka&lt;/artifactId&gt;        &lt;groupId&gt;com.nic&lt;/groupId&gt;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;eureka-server&lt;/artifactId&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><h5 id="1-3-启动一个服务注册中心，只需要一个注解-EnableEurekaServer，这个注解需要在springboot工程的启动application类上加："><a href="#1-3-启动一个服务注册中心，只需要一个注解-EnableEurekaServer，这个注解需要在springboot工程的启动application类上加：" class="headerlink" title="1.3 启动一个服务注册中心，只需要一个注解@EnableEurekaServer，这个注解需要在springboot工程的启动application类上加："></a>1.3 启动一个服务注册中心，只需要一个注解@EnableEurekaServer，这个注解需要在springboot工程的启动application类上加：</h5><pre><code>import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;@SpringBootApplication@EnableEurekaServerpublic class EurekaServerApplication {    public static void main(String[] args) {        SpringApplication.run( EurekaServerApplication.class, args );    }}</code></pre><h5 id="1-4-eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka-server也是一个eureka-client-必须要指定一个-server。eureka-server的配置文件appication-yaml："><a href="#1-4-eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka-server也是一个eureka-client-必须要指定一个-server。eureka-server的配置文件appication-yaml：" class="headerlink" title="1.4 eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka server也是一个eureka client ,必须要指定一个 server。eureka server的配置文件appication.yaml："></a>1.4 eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka server也是一个eureka client ,必须要指定一个 server。eureka server的配置文件appication.yaml：</h5><pre><code>server:  port: 8761eureka:  instance:    hostname: localhost  client:    registerWithEureka: false    fetchRegistry: false    serviceUrl:      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/spring:  application:    name: eureka-server</code></pre><h5 id="1-5-启动工程-打开浏览器访问：-http-localhost-8761-界面如下："><a href="#1-5-启动工程-打开浏览器访问：-http-localhost-8761-界面如下：" class="headerlink" title="1.5 启动工程,打开浏览器访问： http://localhost:8761 ,界面如下："></a>1.5 启动工程,打开浏览器访问： <a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a> ,界面如下：</h5><p><img src="https://i.imgur.com/Vrtv6wb.png" alt=""></p><h5 id="1-6-过程中遇到的坑！！！"><a href="#1-6-过程中遇到的坑！！！" class="headerlink" title="1.6  过程中遇到的坑！！！"></a>1.6  过程中遇到的坑！！！</h5><h4 id="启动项目端口一直是默认的8080，而且一直报错ClientHandlerException-java-net-ConnectException-Connection-refused-connect。"><a href="#启动项目端口一直是默认的8080，而且一直报错ClientHandlerException-java-net-ConnectException-Connection-refused-connect。" class="headerlink" title="启动项目端口一直是默认的8080，而且一直报错ClientHandlerException: java.net.ConnectException: Connection refused: connect。"></a>启动项目端口一直是默认的8080，而且一直报错ClientHandlerException: java.net.ConnectException: Connection refused: connect。</h4><p>网上查的都是在默认设置下，Eureka服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为。<br>禁止方式如下：在application.properties配置文件中增加以下内容<br><br>eureka.client.register-with-eureka=false<br><br>eureka.client.fetch-registry=false<br><br>但是发现自己的配置文件已经配了。后来仔细想了下是应该是配置文件一直读取不到，因为端口一直是8080，折腾了半天，解决办法：<br>将resource文件夹设置为资源目录</p><p><img src="https://i.imgur.com/uh7FgUL.png" alt=""></p><h1 id="二、创建一个服务提供者-eureka-client"><a href="#二、创建一个服务提供者-eureka-client" class="headerlink" title="二、创建一个服务提供者 (eureka client)"></a>二、创建一个服务提供者 (eureka client)</h1><p>当client向server注册时，它会提供一些元数据，例如主机和端口，URL，主页等。Eureka server 从每个client实例接收心跳消息。 如果心跳超时，则通常将该实例从注册server中删除。</p><p>创建过程同server类似,创建完pom.xml如下：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;eureka&lt;/artifactId&gt;        &lt;groupId&gt;com.nic&lt;/groupId&gt;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;packaging&gt;jar&lt;/packaging&gt;    &lt;artifactId&gt;eureka-client&lt;/artifactId&gt;    &lt;name&gt;eureka-client&lt;/name&gt;    &lt;description&gt;eureka-client project for Spring Boot&lt;/description&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;            &lt;version&gt;RELEASE&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><p>通过注解@EnableEurekaClient 表明自己是一个eurekaclient.</p><pre><code>import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;@SpringBootApplication@EnableEurekaClient@RestControllerpublic class EurekaClientApplication {    public static void main(String[] args) {        SpringApplication.run(EurekaClientApplication.class, args);    }    @Value(&quot;${server.port}&quot;)    String port;    @RequestMapping(&quot;/hi&quot;)    public String home(@RequestParam(value = &quot;name&quot;, defaultValue = &quot;forezp&quot;) String name) {        return &quot;hi &quot; + name + &quot; ,i am from port:&quot; + port;    }}</code></pre><p>还需要在配置文件中注明自己的服务注册中心的地址，application.yaml配置文件如下：</p><pre><code>server:  port: 8762spring:  application:    name: service-hieureka:  client:    serviceUrl:      defaultZone: http://localhost:8761/eureka/</code></pre><p>需要指明spring.application.name,这个很重要，这在以后的服务与服务之间相互调用一般都是根据这个name 。<br>启动工程，打开<a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a> ，即eureka server 的网址：</p><p><img src="https://i.imgur.com/xL56lZB.png" alt=""></p><p>你会发现一个服务已经注册在服务中了，服务名为SERVICE-HI ,端口为7862</p><p>这时打开 <a href="http://localhost:8762/hi?name=test" target="_blank" rel="noopener">http://localhost:8762/hi?name=test</a> ，你会在浏览器上看到 :</p><p><img src="https://i.imgur.com/Fthz9y6.png" alt=""></p><p>源码下载：<a href="https://github.com/estiny/Eureka" target="_blank" rel="noopener">https://github.com/estiny/Eureka</a></p><p>参考资料：<a href="https://blog.csdn.net/forezp/article/details/81040925" target="_blank" rel="noopener">https://blog.csdn.net/forezp/article/details/81040925</a></p>]]></content>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多数据源配置</title>
      <link href="/2018/08/29/datasource/"/>
      <url>/2018/08/29/datasource/</url>
      <content type="html"><![CDATA[<p>server.port=8081<br>spring.profiles.active=dev</p><p>master.datasource.type=com.alibaba.druid.pool.DruidDataSource<br>master.datasource.driver-class-name=com.mysql.jdbc.Driver<br>master.datasource.url=jdbc:mysql://localhost:3306/spring?useSSL=false<br>master.datasource.username=root<br>master.datasource.password=root</p><p>slave.datasource.names=slave1,slave2</p><p>slave.datasource.slave1.type=com.alibaba.druid.pool.DruidDataSource<br>slave.datasource.slave1.driver-class-name=com.mysql.jdbc.Driver<br>slave.datasource.slave1.url=jdbc:mysql://localhost:3306/spring2?useSSL=false<br>slave.datasource.slave1.username=root<br>slave.datasource.slave1.password=root</p><p>slave.datasource.slave2.type=com.alibaba.druid.pool.DruidDataSource<br>slave.datasource.slave2.driver-class-name=com.mysql.jdbc.Driver<br>slave.datasource.slave2.url=jdbc:mysql://localhost:3306/spring2?useSSL=false<br>slave.datasource.slave2.username=root<br>slave.datasource.slave2.password=root</p><h1 id="下面为连接池的补充设置，应用到上面所有数据源中"><a href="#下面为连接池的补充设置，应用到上面所有数据源中" class="headerlink" title="下面为连接池的补充设置，应用到上面所有数据源中"></a>下面为连接池的补充设置，应用到上面所有数据源中</h1><h1 id="初始化大小，最小，最大"><a href="#初始化大小，最小，最大" class="headerlink" title="初始化大小，最小，最大"></a>初始化大小，最小，最大</h1><p>druid.initialSize=5<br>druid.minIdle=5<br>druid.maxActive=20</p><h1 id="配置获取连接等待超时的时间"><a href="#配置获取连接等待超时的时间" class="headerlink" title="配置获取连接等待超时的时间"></a>配置获取连接等待超时的时间</h1><p>druid.maxWait=60000</p><h1 id="配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒"><a href="#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒" class="headerlink" title="配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒"></a>配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</h1><p>druid.timeBetweenEvictionRunsMillis=60000</p><h1 id="配置一个连接在池中最小生存的时间，单位是毫秒"><a href="#配置一个连接在池中最小生存的时间，单位是毫秒" class="headerlink" title="配置一个连接在池中最小生存的时间，单位是毫秒"></a>配置一个连接在池中最小生存的时间，单位是毫秒</h1><p>druid.minEvictableIdleTimeMillis=300000<br>druid.validationQuery=SELECT 1 FROM DUAL<br>druid.testWhileIdle=true<br>druid.testOnBorrow=false<br>druid.testOnReturn=false</p><h1 id="打开PSCache，并且指定每个连接上PSCache的大小"><a href="#打开PSCache，并且指定每个连接上PSCache的大小" class="headerlink" title="打开PSCache，并且指定每个连接上PSCache的大小"></a>打开PSCache，并且指定每个连接上PSCache的大小</h1><p>druid.poolPreparedStatements=true<br>druid.maxPoolPreparedStatementPerConnectionSize=20</p><h1 id="配置监控统计拦截的filters，去掉后监控界面sql无法统计，’wall’用于防火墙"><a href="#配置监控统计拦截的filters，去掉后监控界面sql无法统计，’wall’用于防火墙" class="headerlink" title="配置监控统计拦截的filters，去掉后监控界面sql无法统计，’wall’用于防火墙"></a>配置监控统计拦截的filters，去掉后监控界面sql无法统计，’wall’用于防火墙</h1><p>druid.filters=stat,wall,log4j</p><h1 id="通过connectProperties属性来打开mergeSql功能；慢SQL记录"><a href="#通过connectProperties属性来打开mergeSql功能；慢SQL记录" class="headerlink" title="通过connectProperties属性来打开mergeSql功能；慢SQL记录"></a>通过connectProperties属性来打开mergeSql功能；慢SQL记录</h1><p>druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</p><h1 id="合并多个DruidDataSource的监控数据"><a href="#合并多个DruidDataSource的监控数据" class="headerlink" title="合并多个DruidDataSource的监控数据"></a>合并多个DruidDataSource的监控数据</h1><p>#druid.useGlobalDataSourceStat=true</p>]]></content>
      
      
        <tags>
            
            <tag> 多数据源配置 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
